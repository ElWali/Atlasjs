**refactor the entire Atlas.js library** to strictly follow **Google JavaScript Style Guide**, including:

- Replace `var` with `const`/`let`
- Use `camelCase` consistently (already mostly followed)
- Use single quotes
- Enforce 2-space indentation
- Add JSDoc comments where missing or improve existing ones
- Ensure proper spacing, line breaks (80-char limit where reasonable)
- Modernize function expressions to arrow functions where appropriate
- Preserve UMD wrapper and public API
- Keep all functionality intact.



split the **Google JavaScript Style–refactored Atlas.js** into logical, manageable sections based on the library’s architecture.

Each section will follow **Google JavaScript Style Guide** precisely:
- `const`/`let` instead of `var`
- 2-space indentation
- Single quotes
- JSDoc for all public APIs
- Proper naming (`camelCase`, `PascalCase`, `UPPER_SNAKE_CASE`)
- Arrow functions where appropriate
- No trailing commas
- 80-char line limit respected where practical

---

### 📁 Section 1: **Core Utilities & Setup**
- UMD wrapper
- `Util` module (`extend`, `bind`, `stamp`, `throttle`, etc.)
- Browser detection (`Browser`)
- DOM utilities (`DomUtil`)
- DOM events (`DomEvent`)

### 📁 Section 2: **Class System & Events**
- `Class` constructor and inheritance
- `Evented` base class
- Mixin pattern (`Mixin.Events`)

### 📁 Section 3: **Geometric Primitives**
- `Point`
- `Bounds`
- `LatLng`
- `LatLngBounds`
- Coordinate conversion helpers (`toPoint`, `toLatLng`, etc.)

### 📁 Section 4: **Projection & CRS**
- `Transformation`
- `CRS` (Coordinate Reference Systems)
- `EPSG3857`, `Earth`, `SphericalMercator`

### 📁 Section 5: **Map Core**
- `Map` class (the heart of the library)
- View management, zoom, pan, bounds, pixel conversions
- Event handling, resize, scroll prevention

### 📁 Section 6: **Layers Base & Grouping**
- `Layer` abstract base
- `LayerGroup` and `FeatureGroup`
- Layer management on map (`addLayer`, `removeLayer`, etc.)

### 📁 Section 7: **Vector Layers**
- `Path` base
- `CircleMarker`, `Circle`
- `Polyline`, `Polygon`, `Rectangle`
- Geometry utilities (`LineUtil`, `PolyUtil`)

### 📁 Section 8: **Raster & Overlay Layers**
- `ImageOverlay`
- `VideoOverlay`
- `SVGOverlay`
- `DivIcon`

### 📁 Section 9: **Tile Layers**
- `GridLayer`
- `TileLayer`
- `TileLayer.WMS`

### 📁 Section 10: **Renderers**
- `Renderer` base
- `Canvas` renderer
- `SVG` renderer

### 📁 Section 11: **Markers & Icons**
- `Icon` and `Icon.Default`
- `DivIcon`
- `Marker` with drag support (`MarkerDrag`)

### 📁 Section 12: **Popups & Tooltips**
- `DivOverlay` base
- `Popup`
- `Tooltip`

### 📁 Section 13: **Controls**
- `Control` base
- `Zoom`, `Scale`, `Attribution`, `Layers` controls

### 📁 Section 14: **Map Interaction Handlers**
- `Handler` base
- `Drag`, `DoubleClickZoom`, `ScrollWheelZoom`, `BoxZoom`, `Keyboard`, `TouchZoom`, `TapHold`

### 📁 Section 15: **GeoJSON Support**
- `GeoJSON` layer
- Geometry-to-layer conversion
- `toGeoJSON` methods

### 📁 Section 16: **Public API Exports**
- All exported functions and classes (`map()`, `marker()`, `tileLayer()`, etc.)
- Version

